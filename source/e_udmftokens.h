//
// The Eternity Engine
// Copyright (C) 2025 Ioan Chera et al.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/
//
// Additional terms and conditions compatible with the GPLv3 apply. See the
// file COPYING-EE for details.
//
//------------------------------------------------------------------------------
//
// Purpose: Universal Doom Map Format token enum and array.
//  Only to be included from e_udmf.cpp
//
// Authors: Ioan Chera, Max Waine
//

#ifndef E_UDMFTOKENS_H_
#define E_UDMFTOKENS_H_

enum token_e
{
    t_alpha,
    t_alphaceiling,
    t_alphafloor,
    t_ambush,
    t_angle,
    t_arg0,
    t_arg1,
    t_arg2,
    t_arg3,
    t_arg4,
    t_attachceiling,
    t_attachfloor,
    t_blockeverything,
    t_blockfloaters,
    t_blocking,
    t_blocklandmonsters,
    t_blockmonsters,
    t_blockplayers,
    t_blocksound,
    t_ceilingid,
    t_ceilingterrain,
    t_class1,
    t_class2,
    t_class3,
    t_clipmidtex,
    t_colormapbottom,
    t_colormapmid,
    t_colormaptop,
    t_coop,
    t_copyceilingportal,
    t_copyfloorportal,
    t_damage_endgodmode,
    t_damage_exitlevel,
    t_damageamount,
    t_damageinterval,
    t_damageterraineffect,
    t_damagetype,
    t_dm,
    t_dontdraw,
    t_dontpegbottom,
    t_dontpegtop,
    t_dormant,
    t_firstsideonly,
    t_floorid,
    t_floorterrain,
    t_friction,
    t_friend,
    t_health,
    t_height,
    t_heightceiling,
    t_heightfloor,
    t_id,
    t_impact,
    t_invisible,
    t_jumpover,
    t_leakiness,
    t_light,
    t_light_top,
    t_light_mid,
    t_light_bottom,
    t_lightabsolute,
    t_lightabsolute_top,
    t_lightabsolute_mid,
    t_lightabsolute_bottom,
    t_lightceiling,
    t_lightceilingabsolute,
    t_lightfloor,
    t_lightfloorabsolute,
    t_lightlevel,
    t_lightseqalt,
    t_lightsequence,
    t_lowerportal,
    t_mapped,
    t_midtex3d,
    t_midtex3dimpassible,
    t_missilecross,
    t_monstercross,
    t_monsterpush,
    t_monstershoot,
    t_monsteruse,
    t_offsetx,
    t_offsety,
    t_offsetx_bottom,
    t_offsety_bottom,
    t_offsetx_mid,
    t_offsety_mid,
    t_offsetx_top,
    t_offsety_top,
    t_phasedlight,
    t_polycross,
    t_portal,
    t_portalceiling,
    t_portal_ceil_attached,
    t_portal_ceil_blocksound,
    t_portal_ceil_disabled,
    t_portal_ceil_nopass,
    t_portal_ceil_norender,
    t_portal_ceil_overlaytype,
    t_portal_ceil_useglobaltex,
    t_portalfloor,
    t_portal_floor_attached,
    t_portal_floor_blocksound,
    t_portal_floor_disabled,
    t_portal_floor_nopass,
    t_portal_floor_norender,
    t_portal_floor_overlaytype,
    t_portal_floor_useglobaltex,
    t_passuse,
    t_playercross,
    t_playerpush,
    t_playeruse,
    t_renderstyle,
    t_repeatspecial,
    t_rotationceiling,
    t_rotationfloor,
    t_scroll_ceil_x,
    t_scroll_ceil_y,
    t_scroll_ceil_type,
    t_scroll_floor_x,
    t_scroll_floor_y,
    t_scroll_floor_type,
    t_secret,
    t_sector,
    t_sideback,
    t_sidefront,
    t_single,
    t_skew_bottom_type,
    t_skew_middle_type,
    t_skew_top_type,
    t_skill1,
    t_skill2,
    t_skill3,
    t_skill4,
    t_skill5,
    t_soundsequence,
    t_special,
    t_standing,
    t_strifeally,
    t_texturebottom,
    t_textureceiling,
    t_texturefloor,
    t_texturemiddle,
    t_texturetop,
    t_tranmap,
    t_translucent,
    t_twosided,
    t_type,
    t_upperportal,
    t_v1,
    t_v2,
    t_x,
    t_xpanningceiling,
    t_xpanningfloor,
    t_xscaleceiling,
    t_xscalefloor,
    t_y,
    t_ypanningceiling,
    t_ypanningfloor,
    t_yscaleceiling,
    t_yscalefloor,
    t_zoneboundary,
};

struct keytoken_t
{
    const char            *string;
    DLListItem<keytoken_t> link;
    token_e                token;
};

#define TOKEN(a) { #a, DLListItem<keytoken_t>(), t_##a }

static keytoken_t gTokenList[] = {
    TOKEN(alpha),
    TOKEN(alphaceiling),
    TOKEN(alphafloor),
    TOKEN(ambush),
    TOKEN(angle),
    TOKEN(arg0),
    TOKEN(arg1),
    TOKEN(arg2),
    TOKEN(arg3),
    TOKEN(arg4),
    TOKEN(attachceiling),
    TOKEN(attachfloor),
    TOKEN(blockeverything),
    TOKEN(blockfloaters),
    TOKEN(blocking),
    TOKEN(blocklandmonsters),
    TOKEN(blockmonsters),
    TOKEN(blockplayers),
    TOKEN(blocksound),
    TOKEN(ceilingid),
    TOKEN(ceilingterrain),
    TOKEN(class1),
    TOKEN(class2),
    TOKEN(class3),
    TOKEN(clipmidtex),
    TOKEN(colormapbottom),
    TOKEN(colormapmid),
    TOKEN(colormaptop),
    TOKEN(coop),
    TOKEN(damage_endgodmode),
    TOKEN(damage_exitlevel),
    TOKEN(damageamount),
    TOKEN(damageinterval),
    TOKEN(damageterraineffect),
    TOKEN(damagetype),
    TOKEN(dm),
    TOKEN(dontdraw),
    TOKEN(dontpegbottom),
    TOKEN(dontpegtop),
    TOKEN(dormant),
    TOKEN(firstsideonly),
    TOKEN(floorid),
    TOKEN(floorterrain),
    TOKEN(friction),
    TOKEN(friend),
    TOKEN(health),
    TOKEN(height),
    TOKEN(heightceiling),
    TOKEN(heightfloor),
    TOKEN(id),
    TOKEN(impact),
    TOKEN(invisible),
    TOKEN(jumpover),
    TOKEN(leakiness),
    TOKEN(light),
    TOKEN(light_top),
    TOKEN(light_mid),
    TOKEN(light_bottom),
    TOKEN(lightabsolute),
    TOKEN(lightabsolute_top),
    TOKEN(lightabsolute_mid),
    TOKEN(lightabsolute_bottom),
    TOKEN(lightceiling),
    TOKEN(lightceilingabsolute),
    TOKEN(lightfloor),
    TOKEN(lightfloorabsolute),
    TOKEN(lightlevel),
    TOKEN(lightseqalt),
    TOKEN(lightsequence),
    TOKEN(lowerportal),
    TOKEN(mapped),
    TOKEN(midtex3d),
    TOKEN(midtex3dimpassible),
    TOKEN(missilecross),
    TOKEN(monstercross),
    TOKEN(monsterpush),
    TOKEN(monstershoot),
    TOKEN(monsteruse),
    TOKEN(offsetx),
    TOKEN(offsety),
    TOKEN(offsetx_bottom),
    TOKEN(offsety_bottom),
    TOKEN(offsetx_mid),
    TOKEN(offsety_mid),
    TOKEN(offsetx_top),
    TOKEN(offsety_top),
    TOKEN(polycross),
    TOKEN(portal),
    TOKEN(portalceiling),
    TOKEN(portal_ceil_attached),
    TOKEN(portal_ceil_blocksound),
    TOKEN(portal_ceil_disabled),
    TOKEN(portal_ceil_nopass),
    TOKEN(portal_ceil_norender),
    TOKEN(portal_ceil_overlaytype),
    TOKEN(portal_ceil_useglobaltex),
    TOKEN(portalfloor),
    TOKEN(portal_floor_attached),
    TOKEN(portal_floor_blocksound),
    TOKEN(portal_floor_disabled),
    TOKEN(portal_floor_nopass),
    TOKEN(portal_floor_norender),
    TOKEN(portal_floor_overlaytype),
    TOKEN(portal_floor_useglobaltex),
    TOKEN(passuse),
    TOKEN(phasedlight),
    TOKEN(playercross),
    TOKEN(playerpush),
    TOKEN(playeruse),
    TOKEN(renderstyle),
    TOKEN(repeatspecial),
    TOKEN(rotationceiling),
    TOKEN(rotationfloor),
    TOKEN(scroll_ceil_x),
    TOKEN(scroll_ceil_y),
    TOKEN(scroll_ceil_type),
    TOKEN(scroll_floor_x),
    TOKEN(scroll_floor_y),
    TOKEN(scroll_floor_type),
    TOKEN(secret),
    TOKEN(sector),
    TOKEN(sideback),
    TOKEN(sidefront),
    TOKEN(single),
    TOKEN(skew_bottom_type),
    TOKEN(skew_middle_type),
    TOKEN(skew_top_type),
    TOKEN(skill1),
    TOKEN(skill2),
    TOKEN(skill3),
    TOKEN(skill4),
    TOKEN(skill5),
    TOKEN(soundsequence),
    TOKEN(special),
    TOKEN(standing),
    TOKEN(strifeally),
    TOKEN(texturebottom),
    TOKEN(textureceiling),
    TOKEN(texturefloor),
    TOKEN(texturemiddle),
    TOKEN(texturetop),
    TOKEN(tranmap),
    TOKEN(translucent),
    TOKEN(twosided),
    TOKEN(type),
    TOKEN(upperportal),
    TOKEN(v1),
    TOKEN(v2),
    TOKEN(x),
    TOKEN(xpanningceiling),
    TOKEN(xpanningfloor),
    TOKEN(xscaleceiling),
    TOKEN(xscalefloor),
    TOKEN(y),
    TOKEN(ypanningceiling),
    TOKEN(ypanningfloor),
    TOKEN(yscaleceiling),
    TOKEN(yscalefloor),
    TOKEN(zoneboundary),
};

#undef TOKEN

#endif // E_UDMFTOKENS_H_

// EOF

